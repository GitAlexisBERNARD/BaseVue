import { AllowedComponentProps } from 'vue';
import { Component } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { PropType } from 'vue';
import { VNodeProps } from 'vue';

declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;

declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};

export declare const Collapse: __VLS_WithTemplateSlots<DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    when: boolean;
    baseHeight?: number | undefined;
    as?: keyof HTMLElementTagNameMap | undefined;
}>, {
    baseHeight: number;
    as: string;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    collapse: () => void;
    expand: () => void;
    collapsed: () => void;
    expanded: () => void;
}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<{
    when: boolean;
    baseHeight?: number | undefined;
    as?: keyof HTMLElementTagNameMap | undefined;
}>, {
    baseHeight: number;
    as: string;
}>>> & {
    onCollapse?: (() => any) | undefined;
    onExpanded?: (() => any) | undefined;
    onCollapsed?: (() => any) | undefined;
    onExpand?: (() => any) | undefined;
}, {
    baseHeight: number;
    as: keyof HTMLElementTagNameMap;
}, {}>, Readonly<{
    default({ state }: {
        state: TransitionState;
    }): Component;
}>>;

declare type TransitionState = 'expanding' | 'expanded' | 'collapsing' | 'collapsed';

export { }
